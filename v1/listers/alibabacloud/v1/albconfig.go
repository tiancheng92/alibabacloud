/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/tiancheng92/alibabacloud/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AlbConfigLister helps list AlbConfigs.
// All objects returned here must be treated as read-only.
type AlbConfigLister interface {
	// List lists all AlbConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.AlbConfig, err error)
	// AlbConfigs returns an object that can list and get AlbConfigs.
	AlbConfigs(namespace string) AlbConfigNamespaceLister
	AlbConfigListerExpansion
}

// albConfigLister implements the AlbConfigLister interface.
type albConfigLister struct {
	indexer cache.Indexer
}

// NewAlbConfigLister returns a new AlbConfigLister.
func NewAlbConfigLister(indexer cache.Indexer) AlbConfigLister {
	return &albConfigLister{indexer: indexer}
}

// List lists all AlbConfigs in the indexer.
func (s *albConfigLister) List(selector labels.Selector) (ret []*v1.AlbConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AlbConfig))
	})
	return ret, err
}

// AlbConfigs returns an object that can list and get AlbConfigs.
func (s *albConfigLister) AlbConfigs(namespace string) AlbConfigNamespaceLister {
	return albConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AlbConfigNamespaceLister helps list and get AlbConfigs.
// All objects returned here must be treated as read-only.
type AlbConfigNamespaceLister interface {
	// List lists all AlbConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.AlbConfig, err error)
	// Get retrieves the AlbConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.AlbConfig, error)
	AlbConfigNamespaceListerExpansion
}

// albConfigNamespaceLister implements the AlbConfigNamespaceLister
// interface.
type albConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AlbConfigs in the indexer for a given namespace.
func (s albConfigNamespaceLister) List(selector labels.Selector) (ret []*v1.AlbConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AlbConfig))
	})
	return ret, err
}

// Get retrieves the AlbConfig from the indexer for a given namespace and name.
func (s albConfigNamespaceLister) Get(name string) (*v1.AlbConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("albconfig"), name)
	}
	return obj.(*v1.AlbConfig), nil
}
